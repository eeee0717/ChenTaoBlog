import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.01af844e.js";const u=JSON.parse('{"title":"IEnumerable与IQueryable","description":"","frontmatter":{},"headers":[],"relativePath":"blog/codeBook/CSharp/IEnumerable与IQueryable.md","filePath":"blog/codeBook/CSharp/IEnumerable与IQueryable.md","lastUpdated":null}'),p={name:"blog/codeBook/CSharp/IEnumerable与IQueryable.md"},o=l(`<h1 id="ienumerable与iqueryable" tabindex="-1">IEnumerable与IQueryable <a class="header-anchor" href="#ienumerable与iqueryable" aria-label="Permalink to &quot;IEnumerable与IQueryable&quot;">​</a></h1><p>在C#中可以通过IEnumerable和IQueryable提取出int数组中大于10的数据：</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">nums</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">776</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">213</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#B392F0;">IEnumberable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nums.</span><span style="color:#B392F0;">Where</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">nums</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">776</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">213</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6F42C1;">IEnumberable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">items</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nums.</span><span style="color:#6F42C1;">Where</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在Where方法转到定义，可以看到，这里调用了Enumerable类中的Where方法，方法声明如下：</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">IEnumerable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">TSource</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">Where</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">TSource</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#F97583;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IEnumerable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">TSource</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">source</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Func</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">TSource</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">predicate</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">IEnumerable</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">TSource</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">Where</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">TSource</span><span style="color:#24292E;">&gt;(</span><span style="color:#D73A49;">this</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IEnumerable</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">TSource</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Func</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">TSource</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">predicate</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>同样的，我们可以在EF Core的DbSet类型上调用Where之类的方法进行数据筛选。</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">IQueryable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Book</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">books</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.Books.</span><span style="color:#B392F0;">Where</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> b.Price </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">IQueryable</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Book</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">books</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.Books.</span><span style="color:#6F42C1;">Where</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> b.Price </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>同理，查看where方法的定义，可以看到方法声明如下：</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">IQueryable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">TSource</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">Where</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">TSource</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#F97583;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IQueryable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">TSource</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">source</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Func</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">TSource</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">predicate</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">IQueryable</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">TSource</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">Where</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">TSource</span><span style="color:#24292E;">&gt;(</span><span style="color:#D73A49;">this</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IQueryable</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">TSource</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Func</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">TSource</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">predicate</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个Where方法是一个<code>IQueryable&lt;TSource&gt;</code>类型的扩展方法，其实就是继承了IEnumerable接口的接口：</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IQueryable</span><span style="color:#E1E4E8;"> : </span><span style="color:#B392F0;">System</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Collections</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">IEnumerable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IQueryable</span><span style="color:#24292E;"> : </span><span style="color:#6F42C1;">System</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Collections</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">IEnumerable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么既然IQueryable继承IEnumerable接口，为什么微软还要推出一个IQueryable呢？</p><p>对于普通集合，Where方法会在内存中对每条数据进行过滤，而EF Core如果也把数据都在内存中进行过滤的话，就需要把一张数据库表中的所有数据都加载到内存中，如果数据量非常庞大，就会有<strong>性能问题</strong>。因此比EF Core中的Where实现必须有一套可以让数据的筛选在数据库服务器上执行。使用SQL语句在数据库服务器上完成数据筛选的过程叫做“服务器端评估”；同样的，把数据库加载到应用程序的内存中再进行筛选的过程叫做“客户端评估”。很显然，对于大部分情况来讲，“客户端评估”的性能比较低，我们要避免。</p><p>因为Enumerable类中定义的普通集合使用的Where等方法都是“客户端评估”，因此微软创造了IQueryable类型。</p><p>下面举个例子说明。</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">IQueryable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Book</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">books</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.Books.</span><span style="color:#B392F0;">Where</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> b.Price </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#F97583;">foreach</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> books.</span><span style="color:#B392F0;">Where</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> b.Price </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">  Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">$&quot;Id={</span><span style="color:#E1E4E8;">b</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">Id</span><span style="color:#9ECBFF;">},Title={</span><span style="color:#E1E4E8;">b</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">Title</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">IQueryable</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Book</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">books</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.Books.</span><span style="color:#6F42C1;">Where</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> b.Price </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">foreach</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> books.</span><span style="color:#6F42C1;">Where</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> b.Price </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">  Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">$&quot;Id={</span><span style="color:#24292E;">b</span><span style="color:#032F62;">.</span><span style="color:#24292E;">Id</span><span style="color:#032F62;">},Title={</span><span style="color:#24292E;">b</span><span style="color:#032F62;">.</span><span style="color:#24292E;">Title</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码生成的SQL语句如下：</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SELECT [t].[Id],[</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;">].[AuthorName],[</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;">].[Price],[</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;">].[PubTime],[</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;">].[Title]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">FROM [</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Books</span><span style="color:#E1E4E8;">] AS [t]WHERE [t].[Price]</span><span style="color:#79B8FF;">1.1000000000000001E0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SELECT [t].[Id],[</span><span style="color:#6F42C1;">t</span><span style="color:#24292E;">].[AuthorName],[</span><span style="color:#6F42C1;">t</span><span style="color:#24292E;">].[Price],[</span><span style="color:#6F42C1;">t</span><span style="color:#24292E;">].[PubTime],[</span><span style="color:#6F42C1;">t</span><span style="color:#24292E;">].[Title]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">FROM [</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Books</span><span style="color:#24292E;">] AS [t]WHERE [t].[Price]</span><span style="color:#005CC5;">1.1000000000000001E0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看到，这里EF Core在数据服务器上的语句是服务端评估，因为books变量是<code>IQueryable&lt;Book&gt;</code>类型的。</p><p>接下来我们对代码稍微改变</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">IEnumerable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Book</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">books</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.Books; </span></span>
<span class="line"><span style="color:#F97583;">foreach</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> books.</span><span style="color:#B392F0;">Where</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> b.Price </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">  Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">$&quot;Id={</span><span style="color:#E1E4E8;">b</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">Id</span><span style="color:#9ECBFF;">},Title={</span><span style="color:#E1E4E8;">b</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">Title</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">IEnumerable</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Book</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">books</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.Books; </span></span>
<span class="line"><span style="color:#D73A49;">foreach</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> books.</span><span style="color:#6F42C1;">Where</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> b.Price </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">  Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">$&quot;Id={</span><span style="color:#24292E;">b</span><span style="color:#032F62;">.</span><span style="color:#24292E;">Id</span><span style="color:#032F62;">},Title={</span><span style="color:#24292E;">b</span><span style="color:#032F62;">.</span><span style="color:#24292E;">Title</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们再查看生成的SQL语句，如下：</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SELECT [t].[Id],[</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;">].[AuthorName], [</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;">].[Price],[</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;">].[PubTime],[</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;">].</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Title</span><span style="color:#E1E4E8;">] FROM</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">T_Books</span><span style="color:#E1E4E8;">] AS [t]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SELECT [t].[Id],[</span><span style="color:#6F42C1;">t</span><span style="color:#24292E;">].[AuthorName], [</span><span style="color:#6F42C1;">t</span><span style="color:#24292E;">].[Price],[</span><span style="color:#6F42C1;">t</span><span style="color:#24292E;">].[PubTime],[</span><span style="color:#6F42C1;">t</span><span style="color:#24292E;">].</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Title</span><span style="color:#24292E;">] FROM</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">T_Books</span><span style="color:#24292E;">] AS [t]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>很明显，这次程序把T_Books表中的所有数据都加载到应用程序内存中，然后在内存中进行数据的过滤，变成了客户端评估。</p><p>总之，在使用EF Core的时候，我们要尽量避免客户端评估，能用IQueryable的地方就不要使用IEnumerable。</p>`,25),e=[o];function r(t,c,E,y,i,F){return a(),n("div",null,e)}const d=s(p,[["render",r]]);export{u as __pageData,d as default};
