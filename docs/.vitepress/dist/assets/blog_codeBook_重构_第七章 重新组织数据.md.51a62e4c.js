import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.01af844e.js";const p="/img/重构-7-1.png",o="/img/重构-7-2.png",e="/img/重构-7-3.png",r="/img/重构-7-4.png",t="/img/重构-7-5.png",c="/img/重构-7-6.png",E="/img/重构-7-7.png",y="/img/重构-7-8.png",i="/img/重构-7-9.png",B=JSON.parse('{"title":"第七章 重新组织数据","description":"","frontmatter":{},"headers":[],"relativePath":"blog/codeBook/重构/第七章 重新组织数据.md","filePath":"blog/codeBook/重构/第七章 重新组织数据.md","lastUpdated":1698460688000}'),d={name:"blog/codeBook/重构/第七章 重新组织数据.md"},u=l(`<h1 id="第七章-重新组织数据" tabindex="-1">第七章 重新组织数据 <a class="header-anchor" href="#第七章-重新组织数据" aria-label="Permalink to &quot;第七章 重新组织数据&quot;">​</a></h1><h2 id="自封装值域" tabindex="-1">自封装值域 <a class="header-anchor" href="#自封装值域" aria-label="Permalink to &quot;自封装值域&quot;">​</a></h2><p>「间接访问」：可以通过覆写的方法改变获取数据的途径 「直接访问」：代码比较容易阅读</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_low</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">_high</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">arg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arg </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> _low </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> arg </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> _high;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_low</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">_high</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">arg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arg </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> _low </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> arg </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> _high;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>=&gt;</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_low</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">_high</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">arg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arg </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getLow</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> arg </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHigh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getLow</span><span style="color:#E1E4E8;">() {</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _low;}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHigh</span><span style="color:#E1E4E8;">() {</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _high;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_low</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">_high</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">arg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arg </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLow</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> arg </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHigh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLow</span><span style="color:#24292E;">() {</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _low;}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHigh</span><span style="color:#24292E;">() {</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _high;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="以对象取代数据值" tabindex="-1">以对象取代数据值 <a class="header-anchor" href="#以对象取代数据值" aria-label="Permalink to &quot;以对象取代数据值&quot;">​</a></h2><p><img src="`+p+'" alt="Image.png"></p><h2 id="将实值对象改为引用对象" tabindex="-1">将实值对象改为引用对象 <a class="header-anchor" href="#将实值对象改为引用对象" aria-label="Permalink to &quot;将实值对象改为引用对象&quot;">​</a></h2><p>你有一个类，衍生出许多相等的实体，可以转化为单一对象</p><p><img src="'+o+'" alt="Image.png"></p><h2 id="将引用对象改为实值对象" tabindex="-1">将引用对象改为实值对象 <a class="header-anchor" href="#将引用对象改为实值对象" aria-label="Permalink to &quot;将引用对象改为实值对象&quot;">​</a></h2><p>如果有一个引用对象，很小且不可变，而且不易管理，可以将它变为一个实值对象</p><p><img src="'+e+`" alt="Image.png"></p><h2 id="以对象取代数组" tabindex="-1">以对象取代数组 <a class="header-anchor" href="#以对象取代数组" aria-label="Permalink to &quot;以对象取代数组&quot;">​</a></h2><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">row</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">row [</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Liverpool&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">row [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;15&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">row</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">row [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Liverpool&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">row [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;15&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>=&gt;</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Performance</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">row</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Performance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">row.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Liverpool&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">row.</span><span style="color:#B392F0;">setWins</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;15&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Performance</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">row</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Performance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">row.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Liverpool&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">row.</span><span style="color:#6F42C1;">setWins</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;15&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="复制「被监视的数据」" tabindex="-1">复制「被监视的数据」 <a class="header-anchor" href="#复制「被监视的数据」" aria-label="Permalink to &quot;复制「被监视的数据」&quot;">​</a></h2><p>一个分层良好的系统应该将GUI处理事件和业务逻辑的代码分开</p><p><img src="`+r+'" alt="Image.png"></p><h2 id="将单向关联改为双向" tabindex="-1">将单向关联改为双向 <a class="header-anchor" href="#将单向关联改为双向" aria-label="Permalink to &quot;将单向关联改为双向&quot;">​</a></h2><p>开发初期，你可能会在两个classes之间建立一条单向连接，使其中一个可以引用另一个class。随着时间推移，你可能发现需要一个反向指针双向连接两个classes。</p><p><img src="'+t+`" alt="Image.png"></p><h2 id="将双向关联改为单向" tabindex="-1">将双向关联改为单向 <a class="header-anchor" href="#将双向关联改为单向" aria-label="Permalink to &quot;将双向关联改为单向&quot;">​</a></h2><p>两个classes之间有双向关联，但其中一个class不再需要另一个class的特性</p><h2 id="以符号常量-字面常量取代魔法数" tabindex="-1">以符号常量/字面常量取代魔法数 <a class="header-anchor" href="#以符号常量-字面常量取代魔法数" aria-label="Permalink to &quot;以符号常量/字面常量取代魔法数&quot;">​</a></h2><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">potentialEnergy</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mass</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">height</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mass </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9.81</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> height;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">potentialEnergy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mass</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">height</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mass </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9.81</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> height;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>=&gt;</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">potentialEnergy</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mass</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">height</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mass </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> GRAVITATIONAL_CONSTANT </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> height;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> final </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GRAVITATIONAL_CONSTANT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9.81</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">potentialEnergy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mass</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">height</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mass </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> GRAVITATIONAL_CONSTANT </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> height;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> final </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GRAVITATIONAL_CONSTANT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9.81</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="封装值域" tabindex="-1">封装值域 <a class="header-anchor" href="#封装值域" aria-label="Permalink to &quot;封装值域&quot;">​</a></h2><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String _name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String _name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>=&gt;</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_name</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() {</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _name;}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">arg</span><span style="color:#E1E4E8;">) {_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arg;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_name</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _name;}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">arg</span><span style="color:#24292E;">) {_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arg;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="封装群集" tabindex="-1">封装群集 <a class="header-anchor" href="#封装群集" aria-label="Permalink to &quot;封装群集&quot;">​</a></h2><p><img src="`+c+'" alt="Image.png"></p><h2 id="以类取代型别码" tabindex="-1">以类取代型别码 <a class="header-anchor" href="#以类取代型别码" aria-label="Permalink to &quot;以类取代型别码&quot;">​</a></h2><p><img src="'+E+'" alt="Image.png"></p><h2 id="以子类取代型别码" tabindex="-1">以子类取代型别码 <a class="header-anchor" href="#以子类取代型别码" aria-label="Permalink to &quot;以子类取代型别码&quot;">​</a></h2><p><img src="'+y+`" alt="Image.png"></p><h2 id="以state-strategy-取代型别码" tabindex="-1">以State/Strategy 取代型别码 <a class="header-anchor" href="#以state-strategy-取代型别码" aria-label="Permalink to &quot;以State/Strategy 取代型别码&quot;">​</a></h2><p>如果「type code 的值在对象生命期中发生变化」或「其他原因使得宿主类不能被subclassing 」可以使用该方法。</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Employee</span><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  void setType(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">arg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    _type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EmployeeType.</span><span style="color:#B392F0;">newType</span><span style="color:#E1E4E8;">(arg);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EmployeeType</span><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  static EmployeeType newType(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">switch</span><span style="color:#E1E4E8;"> (code) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      case </span><span style="color:#B392F0;">ENGINEER</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Engineer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      case </span><span style="color:#B392F0;">SALESMAN</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Salesman</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      case </span><span style="color:#B392F0;">MANAGER</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Manager</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Incorrect Employee Code&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> final </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ENGINEER</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> final </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SALESMAN</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> final </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MANAGER</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Employee</span><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">  void setType(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">arg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    _type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmployeeType.</span><span style="color:#6F42C1;">newType</span><span style="color:#24292E;">(arg);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EmployeeType</span><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">  static EmployeeType newType(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">switch</span><span style="color:#24292E;"> (code) {</span></span>
<span class="line"><span style="color:#24292E;">      case </span><span style="color:#6F42C1;">ENGINEER</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Engineer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      case </span><span style="color:#6F42C1;">SALESMAN</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Salesman</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      case </span><span style="color:#6F42C1;">MANAGER</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Manager</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Incorrect Employee Code&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> final </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ENGINEER</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> final </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SALESMAN</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> final </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MANAGER</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="以值域取代子类" tabindex="-1">以值域取代子类 <a class="header-anchor" href="#以值域取代子类" aria-label="Permalink to &quot;以值域取代子类&quot;">​</a></h2><p>如果各个子类的唯一差别只在「返回常量数据」的函数身上。</p><p><img src="`+i+'" alt="Image.png"></p>',46),b=[u];function F(g,h,m,A,C,v){return a(),n("div",null,b)}const D=s(d,[["render",F]]);export{B as __pageData,D as default};
