import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a6386e6f.js";const b=JSON.parse('{"title":"第三章 代码的坏味道","description":"","frontmatter":{},"headers":[],"relativePath":"blog/codeBook/重构/第三章 代码的坏味道.md","filePath":"blog/codeBook/重构/第三章 代码的坏味道.md","lastUpdated":null}'),p={name:"blog/codeBook/重构/第三章 代码的坏味道.md"},e=l(`<h1 id="第三章-代码的坏味道" tabindex="-1">第三章 代码的坏味道 <a class="header-anchor" href="#第三章-代码的坏味道" aria-label="Permalink to &quot;第三章 代码的坏味道&quot;">​</a></h1><ol><li><h2 id="重复的代码" tabindex="-1">重复的代码 <a class="header-anchor" href="#重复的代码" aria-label="Permalink to &quot;重复的代码&quot;">​</a></h2></li></ol><p>提炼出重复的代码，用以复用</p><ol start="2"><li><h2 id="过长的函数" tabindex="-1">过长的函数 <a class="header-anchor" href="#过长的函数" aria-label="Permalink to &quot;过长的函数&quot;">​</a></h2></li></ol><ul><li>分解函数，当需要使用注释时，将说明的东西写进独立函数</li><li>如果函数内有大量的参数和临时变量，使用Replace Temp with Query（将临时变量转换为函数的形式）</li><li>如果还是太多可以使用Replace Method with Method Object（将函数转换成函数对象，生成新的类）</li></ul><ol start="3"><li><h2 id="过大类-单一类具有太多职责" tabindex="-1">过大类：单一类具有太多职责 <a class="header-anchor" href="#过大类-单一类具有太多职责" aria-label="Permalink to &quot;过大类：单一类具有太多职责&quot;">​</a></h2></li></ol><p>使用extract class将多个相同前后缀的变量提炼到一个组件内。</p><ol start="4"><li><h2 id="过长参数列" tabindex="-1">过长参数列 <a class="header-anchor" href="#过长参数列" aria-label="Permalink to &quot;过长参数列&quot;">​</a></h2></li></ol><p>太长的参数列导致函数难以理解，不易使用。</p><p>使用Replace Parameter with Method，用函数 [get()] 取代参数。</p><ol start="5"><li><h2 id="发散式变化" tabindex="-1">发散式变化 <a class="header-anchor" href="#发散式变化" aria-label="Permalink to &quot;发散式变化&quot;">​</a></h2></li></ol><p>每个对象最好都只因一种变化而修改，也就是说如果新加入一个数据库，只需要修改一个函数。</p><ol start="6"><li><h2 id="散弹式修改" tabindex="-1">散弹式修改 <a class="header-anchor" href="#散弹式修改" aria-label="Permalink to &quot;散弹式修改&quot;">​</a></h2></li></ol><p>如果遇到某种变化需要在不同的类做出修改，则很容易忘记某个重要的修改。</p><p>这种情况需要将所有需要修改的代码放进同一个类中，通常可以使用内联类的方式。</p><ol start="7"><li><h2 id="依恋情结" tabindex="-1">依恋情结 <a class="header-anchor" href="#依恋情结" aria-label="Permalink to &quot;依恋情结&quot;">​</a></h2></li></ol><p>如果一个某个函数为了计算某个值几乎调用了另一个对象的大部分函数，则需要使用move method进行函数的分解</p><ol start="8"><li><h2 id="数据泥团" tabindex="-1">数据泥团 <a class="header-anchor" href="#数据泥团" aria-label="Permalink to &quot;数据泥团&quot;">​</a></h2></li></ol><p>将[总是绑在一起出现的数据]放进属于它们自己的对象中，简化函数的调用动作。</p><ol start="9"><li><h2 id="基本型别偏执" tabindex="-1">基本型别偏执 <a class="header-anchor" href="#基本型别偏执" aria-label="Permalink to &quot;基本型别偏执&quot;">​</a></h2></li></ol><p>将相关的数据组织成一个类</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 订单</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customName</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customSex</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">orderId</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">price</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">----</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 把custom相关字段封装起来，在Order中引用Custom对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Custom</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 订单</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Custom</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">custom</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">orderId</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">price</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 订单</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customName</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customSex</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">orderId</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">price</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">----</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 把custom相关字段封装起来，在Order中引用Custom对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Custom</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 订单</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Custom</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">custom</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">orderId</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">price</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><ol start="10"><li><h2 id="switch惊悚现身" tabindex="-1">switch惊悚现身 <a class="header-anchor" href="#switch惊悚现身" aria-label="Permalink to &quot;switch惊悚现身&quot;">​</a></h2></li></ol><p>面向对象的最明显特征就是：少用switch，switch语句的问题在于重复。</p><p>使用[多态]来替换，可以使用工厂+策略模式 <a href="https://blog.csdn.net/geniusxi/article/details/78581542" target="_blank" rel="noreferrer">https://blog.csdn.net/geniusxi/article/details/78581542</a></p><ol start="11"><li><h2 id="平行继承体系" tabindex="-1">平行继承体系 <a class="header-anchor" href="#平行继承体系" aria-label="Permalink to &quot;平行继承体系&quot;">​</a></h2></li></ol><p>每当你为某个类增加一个子类时，必须为另外一个类增加子类，那么就有问题。这种情况我们让一个继承体系的实例去引用另一个继承体系。</p><ol start="12"><li><h2 id="冗余类" tabindex="-1">冗余类 <a class="header-anchor" href="#冗余类" aria-label="Permalink to &quot;冗余类&quot;">​</a></h2></li></ol><p>如果一个类没什么价值，应该让他消失。比如父子类之间的差别不大，就可以合并成一个。</p><ol start="13"><li><h2 id="夸夸其谈未来性" tabindex="-1">夸夸其谈未来性 <a class="header-anchor" href="#夸夸其谈未来性" aria-label="Permalink to &quot;夸夸其谈未来性&quot;">​</a></h2></li></ol><p>不要去考虑未来将有可能发生的事，如果用不到就不值得。</p><ol start="14"><li><h2 id="令人迷惑的暂时值域" tabindex="-1">令人迷惑的暂时值域 <a class="header-anchor" href="#令人迷惑的暂时值域" aria-label="Permalink to &quot;令人迷惑的暂时值域&quot;">​</a></h2></li></ol><p>某个实例变量仅为某种特定情况而设，这样的代码就会不易理解，可以提炼新的对象以适应此种特殊情况。</p><ol start="15"><li><h2 id="过度耦合的消息链" tabindex="-1">过度耦合的消息链 <a class="header-anchor" href="#过度耦合的消息链" aria-label="Permalink to &quot;过度耦合的消息链&quot;">​</a></h2></li></ol><p>避免一长串连续的get()函数，减少代码冗余。</p><ol start="16"><li><h2 id="中间转手人" tabindex="-1">中间转手人 <a class="header-anchor" href="#中间转手人" aria-label="Permalink to &quot;中间转手人&quot;">​</a></h2></li></ol><p>万事必有反，如果中间人承受的委托过多，就会造成真正负责的类不做事，这种情况要移除中间人，也就是把***Message Chains（过度耦合的消息链）***的处理方式反过来。</p><ol start="17"><li><h2 id="狎昵关系" tabindex="-1">狎昵关系 <a class="header-anchor" href="#狎昵关系" aria-label="Permalink to &quot;狎昵关系&quot;">​</a></h2></li></ol><p>说的是两个类过于亲密，例如双向关联，两个类过度依赖。</p><ol start="18"><li><h2 id="异曲同工的类" tabindex="-1">异曲同工的类 <a class="header-anchor" href="#异曲同工的类" aria-label="Permalink to &quot;异曲同工的类&quot;">​</a></h2></li></ol><p>是指两个类做的差不多的事，需要根据不同的业务把方法搬移到不同的类中。</p><ol start="19"><li><h2 id="不完美的程序库类" tabindex="-1">不完美的程序库类 <a class="header-anchor" href="#不完美的程序库类" aria-label="Permalink to &quot;不完美的程序库类&quot;">​</a></h2></li></ol><p>当你用别人的类库但不能满足需求时，需要扩展可以试试*Introduce Local Extension（引入本地扩展）*进行重构，假设我们有一个Date类，我们在不能修改源码并且需要扩展的时候，可以建立一个子类继承Date类，在子类中进行扩展。</p><ol start="20"><li><h2 id="纯稚的数据类" tabindex="-1">纯稚的数据类 <a class="header-anchor" href="#纯稚的数据类" aria-label="Permalink to &quot;纯稚的数据类&quot;">​</a></h2></li></ol><p>简单的说就是把字段用get、set方法封装起来，把私有变量隐藏好。</p><ol start="21"><li><h2 id="被拒绝的遗赠" tabindex="-1">被拒绝的遗赠 <a class="header-anchor" href="#被拒绝的遗赠" aria-label="Permalink to &quot;被拒绝的遗赠&quot;">​</a></h2></li></ol><p>意思是子类不想继承父类的接口和方法。</p><p>传统方法是通过新建一个兄弟类</p><p>但不建议，可以使用Replace Inheritance with Delegation（以委托替代继承）</p><ol start="22"><li><h2 id="过多的注释" tabindex="-1">过多的注释 <a class="header-anchor" href="#过多的注释" aria-label="Permalink to &quot;过多的注释&quot;">​</a></h2></li></ol><p>并不是所有注释都是友好的，加入代码足够清晰则不需要注释</p>`,51),o=[e];function r(t,c,i,y,E,h){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{b as __pageData,u as default};
