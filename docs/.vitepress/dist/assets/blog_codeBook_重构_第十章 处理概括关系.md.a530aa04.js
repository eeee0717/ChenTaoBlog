import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.01af844e.js";const l="/img/重构-10-1.png",e="/img/重构-10-2.png",o="/img/重构-10-3.png",r="/img/重构-10-4.png",c="/img/重构-10-5.png",t="/img/重构-10-6.png",E="/img/重构-10-7.png",i="/img/重构-10-8.png",B=JSON.parse('{"title":"第十章 处理概括关系","description":"","frontmatter":{},"headers":[],"relativePath":"blog/codeBook/重构/第十章 处理概括关系.md","filePath":"blog/codeBook/重构/第十章 处理概括关系.md","lastUpdated":1698460688000}'),y={name:"blog/codeBook/重构/第十章 处理概括关系.md"},d=p('<h1 id="第十章-处理概括关系" tabindex="-1">第十章 处理概括关系 <a class="header-anchor" href="#第十章-处理概括关系" aria-label="Permalink to &quot;第十章 处理概括关系&quot;">​</a></h1><h2 id="值域上移" tabindex="-1">值域上移 <a class="header-anchor" href="#值域上移" aria-label="Permalink to &quot;值域上移&quot;">​</a></h2><p>两个子类拥有相同的值域</p><p>将此值域移至超类</p><p><img src="'+l+'" alt="Image.png"></p><h2 id="函数上移" tabindex="-1">函数上移 <a class="header-anchor" href="#函数上移" aria-label="Permalink to &quot;函数上移&quot;">​</a></h2><p>有些函数在各个子类中产生完全相同的结果</p><p>将该函数移至超类</p><p><img src="'+e+`" alt="Image.png"></p><h2 id="构造函数本体上移" tabindex="-1">构造函数本体上移 <a class="header-anchor" href="#构造函数本体上移" aria-label="Permalink to &quot;构造函数本体上移&quot;">​</a></h2><p>你在各个子类中拥有一些构造函数，它们的本体几乎完全一致</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Manager</span><span style="color:#E1E4E8;"> extends Employee...</span></span>
<span class="line"><span style="color:#E1E4E8;">public Manager (</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grade</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  _name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">  _id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">  _grade </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> grade;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Manager</span><span style="color:#24292E;"> extends Employee...</span></span>
<span class="line"><span style="color:#24292E;">public Manager (</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grade</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  _name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">  _id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">  _grade </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> grade;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>=&gt;</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Manager</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grade</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">super</span><span style="color:#E1E4E8;"> (name, id);</span></span>
<span class="line"><span style="color:#E1E4E8;">  _grade </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> grade;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Manager</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grade</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">super</span><span style="color:#24292E;"> (name, id);</span></span>
<span class="line"><span style="color:#24292E;">  _grade </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> grade;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="函数下移" tabindex="-1">函数下移 <a class="header-anchor" href="#函数下移" aria-label="Permalink to &quot;函数下移&quot;">​</a></h2><p>超类中某个函数只与部分子类有关</p><p>将这个函数移到相关的子类中去</p><p><img src="`+o+'" alt="Image.png"></p><h2 id="值域下移" tabindex="-1">值域下移 <a class="header-anchor" href="#值域下移" aria-label="Permalink to &quot;值域下移&quot;">​</a></h2><p>超类中某个值域只与部分子类有关</p><p>将这个值域移到相关的子类中去</p><h2 id="提炼子类" tabindex="-1">提炼子类 <a class="header-anchor" href="#提炼子类" aria-label="Permalink to &quot;提炼子类&quot;">​</a></h2><p>class中的某些特性只被某些实体用到，新建一个子类，将上面的一部分特性转移到子类上</p><p><img src="'+r+'" alt="Image.png"></p><h2 id="提炼超类" tabindex="-1">提炼超类 <a class="header-anchor" href="#提炼超类" aria-label="Permalink to &quot;提炼超类&quot;">​</a></h2><p>两个类有相似的特性</p><p>为这两个类建立一个超类，将相同的特性移至超类中</p><p><img src="'+c+'" alt="Image.png"></p><h2 id="提炼接口" tabindex="-1">提炼接口 <a class="header-anchor" href="#提炼接口" aria-label="Permalink to &quot;提炼接口&quot;">​</a></h2><p>若干客户使用class接口中的同一个子集，或者两个class的接口有部分相同</p><p><img src="'+t+'" alt="Image.png"></p><h2 id="折叠继承关系" tabindex="-1">折叠继承关系 <a class="header-anchor" href="#折叠继承关系" aria-label="Permalink to &quot;折叠继承关系&quot;">​</a></h2><p>超类和子类之间并无太大区别</p><p><img src="'+E+`" alt="Image.png"></p><h2 id="塑造模版函数" tabindex="-1">塑造模版函数 <a class="header-anchor" href="#塑造模版函数" aria-label="Permalink to &quot;塑造模版函数&quot;">​</a></h2><p>继承是避免重复行为的强大工具。无论何时，只要看到两个子类之间有类似的函数，就可以提升他们到超类中。但是如果这些函数不完全相同，则需要尽量避免重复</p><h2 id="以委托取代继承" tabindex="-1">以委托取代继承 <a class="header-anchor" href="#以委托取代继承" aria-label="Permalink to &quot;以委托取代继承&quot;">​</a></h2><p>某个子类只使用了超类的部分功能</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyStack</span><span style="color:#E1E4E8;"> extends Vector {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">element</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">insertElementAt</span><span style="color:#E1E4E8;">(element,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">firstElement</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">removeElementAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyStack</span><span style="color:#24292E;"> extends Vector {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">element</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">insertElementAt</span><span style="color:#24292E;">(element,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">firstElement</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">removeElementAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>=&gt;</p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyStack</span><span style="color:#E1E4E8;"> extends Vector{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vector</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_vector</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vector</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">element</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    _vector.</span><span style="color:#B392F0;">insertElementAt</span><span style="color:#E1E4E8;">(element,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyStack</span><span style="color:#24292E;"> extends Vector{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vector</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_vector</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vector</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">element</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    _vector.</span><span style="color:#6F42C1;">insertElementAt</span><span style="color:#24292E;">(element,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="以继承取代委托" tabindex="-1">以继承取代委托 <a class="header-anchor" href="#以继承取代委托" aria-label="Permalink to &quot;以继承取代委托&quot;">​</a></h2><p>你在两个classes 之间使用委托关系（delegation），并经常为整个接口编写许多极简单的请托函数（delegating methods）</p><p><img src="`+i+'" alt="Image.png"></p>',44),m=[d];function b(u,h,g,F,_,C){return a(),n("div",null,m)}const k=s(y,[["render",b]]);export{B as __pageData,k as default};
