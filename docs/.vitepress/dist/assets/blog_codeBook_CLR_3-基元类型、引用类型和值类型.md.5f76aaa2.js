import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.01af844e.js";const l="/img/CLR-3-1.png",E=JSON.parse('{"title":"3-基元类型、引用类型和值类型","description":"","frontmatter":{},"headers":[],"relativePath":"blog/codeBook/CLR/3-基元类型、引用类型和值类型.md","filePath":"blog/codeBook/CLR/3-基元类型、引用类型和值类型.md","lastUpdated":1698395830000}'),e={name:"blog/codeBook/CLR/3-基元类型、引用类型和值类型.md"},o=p('<h1 id="_3-基元类型、引用类型和值类型" tabindex="-1">3-基元类型、引用类型和值类型 <a class="header-anchor" href="#_3-基元类型、引用类型和值类型" aria-label="Permalink to &quot;3-基元类型、引用类型和值类型&quot;">​</a></h1><h2 id="_1、基元类型" tabindex="-1">1、基元类型 <a class="header-anchor" href="#_1、基元类型" aria-label="Permalink to &quot;1、基元类型&quot;">​</a></h2><p>基元类型：编译器直接支持的类型</p><p>只有在转换安全时，才允许隐式转换；当数据会丢失精度时，则要求使用显示转换</p><hr><h2 id="_2、引用类型和值类型" tabindex="-1">2、引用类型和值类型 <a class="header-anchor" href="#_2、引用类型和值类型" aria-label="Permalink to &quot;2、引用类型和值类型&quot;">​</a></h2><p>引用类型（堆分配）：引用托管堆上的类型，所有“类”都是引用类型。</p><p>值类型（栈分配）：直接存放值，所有的“结构”和“枚举”都是值类型。性能更好</p><p><img src="'+l+`" alt="Image.png"></p><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 值类型栈上分配</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 默认初始化为0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 引用类型</span></span>
<span class="line"><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 未进行初始化，编译器报错</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.x;</span></span>
<span class="line"><span style="color:#6A737D;">// Class a = new(); // 初始化后，托管堆实例化对象</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 值类型栈上分配</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 默认初始化为0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 引用类型</span></span>
<span class="line"><span style="color:#6F42C1;">Class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 未进行初始化，编译器报错</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.x;</span></span>
<span class="line"><span style="color:#6A737D;">// Class a = new(); // 初始化后，托管堆实例化对象</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>若满足以下全部条件，可以声明为值类型</p><p>1、类型具有基元类型的行为（简单的类型），值类型建议标记为<strong>readonly</strong></p><p>2、类型不需要从其他任何类型继承</p><p>3、类型不派生出其他任何类型</p><p>4、类型的实例较小</p><p>5、类型的实例较大，但不作为方法传递实参，也不从方法返回</p><hr><p>值类型的局限：</p><p>1、有两种表示形式：<strong>未装箱</strong>和<strong>已装箱</strong></p><p>2、所有方法不能是抽象的，所有方法都隐式密封、不可重写</p><p>3、引用类型初始化默认null，值类型初始化默认0</p><p>4、值类型赋值时复制值，引用类型复制内存地址</p>`,22),t=[o];function r(c,i,_,d,y,b){return a(),n("div",null,t)}const m=s(e,[["render",r]]);export{E as __pageData,m as default};
