import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.030aafca.js";const u=JSON.parse('{"title":"委托","description":"","frontmatter":{},"headers":[],"relativePath":"blog/codeBook/CSharp/委托.md","filePath":"blog/codeBook/CSharp/委托.md","lastUpdated":1698559739000}'),o={name:"blog/codeBook/CSharp/委托.md"},e=n(`<h1 id="委托" tabindex="-1">委托 <a class="header-anchor" href="#委托" aria-label="Permalink to &quot;委托&quot;">​</a></h1><p><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/delegates/" target="_blank" rel="noreferrer">官方文档</a></p><h3 id="什么是委托" tabindex="-1">什么是委托？ <a class="header-anchor" href="#什么是委托" aria-label="Permalink to &quot;什么是委托？&quot;">​</a></h3><p>简单来说，委托在某种程度上提供了间接的方法。举个栗子，遗嘱由一系列指令组成，例如：付账单，捐善款，其余财产留给猫。 遗嘱一般是某人去世前写好，然后放到一个安全的地方，希望律师去执行这些指令。委托正是如此，提供一个接口，但不知道具体实现。</p><h3 id="简单委托的构成" tabindex="-1">简单委托的构成 <a class="header-anchor" href="#简单委托的构成" aria-label="Permalink to &quot;简单委托的构成&quot;">​</a></h3><ol><li>声明委托类型</li></ol><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">delegate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringProcessor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">input</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">delegate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringProcessor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">input</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li><p>必须有一个方法包含了要执行的代码</p><p>具有与委托相同的返回值和参数</p></li></ol><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PrintString</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">x</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PrintString</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">x</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>必须创建一个委托实例</li></ol><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">StringProcessor</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proc</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">proc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringProcessor</span><span style="color:#E1E4E8;">(PrintString);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">StringProcessor</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proc</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">proc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringProcessor</span><span style="color:#24292E;">(PrintString);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li>调用(invoke)委托实例</li></ol><div class="language-cs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">proc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">proc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="何时使用委托而不是接口" tabindex="-1">何时使用委托而不是接口？ <a class="header-anchor" href="#何时使用委托而不是接口" aria-label="Permalink to &quot;何时使用委托而不是接口？&quot;">​</a></h2><p><a href="https://learn.microsoft.com/zh-cn/previous-versions/visualstudio/visual-studio-2010/ms173173(v=vs.100)" target="_blank" rel="noreferrer">官方文档</a></p><p>在以下情况下，请使用委托：</p><ul><li>当使用事件设计模式时。</li><li>当封装静态方法可取时。</li><li>当调用方不需要访问实现该方法的对象中的其他属性、方法或接口时。</li><li>需要方便的组合。</li><li>当类可能需要该方法的多个实现时。</li></ul><p>在以下情况下，请使用接口：</p><ul><li>当存在一组可能被调用的相关方法时。</li><li>当类只需要方法的单个实现时。</li><li>当使用接口的类想要将该接口强制转换为其他接口或类类型时。</li><li>当正在实现的方法链接到类的类型或标识时：例如比较方法。</li></ul>`,19),p=[e];function r(t,c,i,d,y,E){return a(),l("div",null,p)}const g=s(o,[["render",r]]);export{u as __pageData,g as default};
