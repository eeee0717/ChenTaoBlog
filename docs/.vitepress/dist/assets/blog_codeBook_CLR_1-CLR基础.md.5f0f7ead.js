import{_ as a,o as e,c as t,Q as o}from"./chunks/framework.a6386e6f.js";const C=JSON.parse('{"title":"1-CLR基础","description":"","frontmatter":{},"headers":[],"relativePath":"blog/codeBook/CLR/1-CLR基础.md","filePath":"blog/codeBook/CLR/1-CLR基础.md","lastUpdated":null}'),r={name:"blog/codeBook/CLR/1-CLR基础.md"},l=o(`<h1 id="_1-clr基础" tabindex="-1">1-CLR基础 <a class="header-anchor" href="#_1-clr基础" aria-label="Permalink to &quot;1-CLR基础&quot;">​</a></h1><h2 id="_1、clr的核心功能-内存管理、程序集加载、安全性、异常处理和线程同步" tabindex="-1">1、CLR的核心功能：内存管理、程序集加载、安全性、异常处理和线程同步 <a class="header-anchor" href="#_1、clr的核心功能-内存管理、程序集加载、安全性、异常处理和线程同步" aria-label="Permalink to &quot;1、CLR的核心功能：内存管理、程序集加载、安全性、异常处理和线程同步&quot;">​</a></h2><h2 id="_2、编译源代码过程" tabindex="-1">2、编译源代码过程 <a class="header-anchor" href="#_2、编译源代码过程" aria-label="Permalink to &quot;2、编译源代码过程&quot;">​</a></h2><h3 id="_3、源代码文件-编译器-托管模块-il代码和元数据" tabindex="-1">3、源代码文件 -&gt; 编译器 -&gt; 托管模块（IL代码和元数据） <a class="header-anchor" href="#_3、源代码文件-编译器-托管模块-il代码和元数据" aria-label="Permalink to &quot;3、源代码文件 -&gt; 编译器 -&gt; 托管模块（IL代码和元数据）&quot;">​</a></h3><p>IL代码：面向CLR编译器生成IL代码，由CLR管理执行</p><p>元数据：</p><pre><code>  ·描述模块中定义了哪些类型或成员

  ·描述模块引用了什么
</code></pre><h2 id="_4、将托管模块合并成程序集" tabindex="-1">4、将托管模块合并成程序集 <a class="header-anchor" href="#_4、将托管模块合并成程序集" aria-label="Permalink to &quot;4、将托管模块合并成程序集&quot;">​</a></h2><p>CLR可以自动判断程序集中执行的代码，并且自动选择需要的依赖</p>`,9),_=[l];function c(n,d,i,s,h,p){return e(),t("div",null,_)}const u=a(r,[["render",c]]);export{C as __pageData,u as default};
